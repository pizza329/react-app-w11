*test
    9.
            class Subject extends Component {
                render() {
                    return (
                    <header>
                    <h1>WEB</h1>
                    world wide web!
                    </header>
                    );
                }  
                }
        {this.props.title}
            <Subject title="WEB" sub="world wide web!"></Subject>
        *연결
            import TOC from './components/TOC';
                import React, { Component } from 'react';
                export default TOC; *연결
        *state
            constructor(props) {
                super(props);
                this.state = {
                subject:{title:'WEB', sub:'World Wide Web!'}
                }
                }
        <Subject 
                title={this.state.subject.title}
                sub={this.state.subject.sub}></Subject>
    10.
        *while
            var lists = [];
            var data = this.props.data;
            var i = 0;
            while (i < data.length){
            lists.push(
                <li key={data[i].id}>
                <a href={"/content/" + data[i].id}>{data[i].title}</a></li>);
            i = i + 1;      
            }

            var i = 0;
            while(i < this.state.contents.length){
                var data = this.state.contents[i];
                if(data.id === this.state.selected_content_id){
                _title = data.title;
                _desc = data.desc;
                break;
                }
                i = i + 1;
            }      
        *모드:'read',
            console.log('App render');
            var _title, _desc = null;
            if(this.state.mode === 'welcome') {
            _title = this.state.welcome.title;
            _desc = this.state.welcome.desc;
            } else if(this.state.mode === 'read'){
            _title = this.state.contents[0].title;
            _desc = this.state.contents[0].desc;
            }
            <Content title={_title} desc={_desc}></Content>
            console.log('Subject render');
            this.setState({ mode: "welcome" });            
                }.bind(this)}>
        *알림창
            {/*<Subject 
                title={this.state.subject.title}
                sub={this.state.subject.sub}></Subject>*/}
                <header>
                <h1><a href="/" onClick={function (){
                    alert("hi");
                }}>{this.state.subject.title}</a></h1>
                {this.state.subject.sub}
                </header>
        *새로고침 방지
            console.log(e);
                    e.preventDefault();
                    //debugger;
                    //alert("hi");
    11.
        *img
            import webImg from "./img/web.png";
            +) image: webImg
            +) img={_image}
            +) <div><img src={this.props.img} alt={this.props.title}></img>
            </div>
    12.
        *mode->create
            console.log(this.state.mode);
            <Control
            onChangeMode={function (_mode) {
                this.setState({ mode: _mode });
            }.bind(this)}
            ></Control>

            +) onClick={function (e) {
                e.preventDefault();
                this.props.onChangeMode("create");
                }.bind(this)}
        *입력창
            import CreateContent from "./components/CreateContent";
            _article = null;
            _article = (
                <ReadContent title={_title} desc={_desc} img={_image}></ReadContent>
            );
            +)  _article = (
                    <ReadContent title={_title} desc={_desc} img={_image}></ReadContent>
                );
                } else if (this.state.mode === "create") {
                _article = <CreateContent></CreateContent>;}
                +) {_article}
        *this.max_content_id = 4;
            <CreateContent
            onSubmit={function (_title, _desc) {
                this.max_content_id = this.max_content_id + 1;
                var _contents = this.state.contents.concat({
                id: this.max_content_id,
                title: _title,
                desc: _desc,
                image: "",
                });
                this.setState({ contents: _contents });
            }.bind(this)}
            ></CreateContent>
        *update
            var _content = this.getReadContent();
            /) constructor(props) {
                    super(props);
                    this.state = {
                    title: this.props.data.title,
                    desc: this.props.data.desc,
                    };
                }
                +)  value={this.state.title}
                    onChange={function (e) {
                    this.setState({ title: e.target.value });
                }.bind(this)}

                /)  <li>
                        <a
                            href="/update"
                            onClick={function (e) {
                            e.preventDefault();
                            this.props.onChangeMode("update");
                            }.bind(this)}
                        >
                            update
                        </a>
                    </li>
        *update(수정)
            /) id: this.props.data.id,
                +) this.props.onSubmit(
                his.state.id,
                this.state.title,
                this.state.desc,
                    );
                +) <input type="hidden" name="id" value={this.state.id} />
            /) }else if (this.state.mode === "update") {
                var _content = this.getReadContent();
                _article = (
                    <UpdateContent
                    data={_content}
                    onSubmit={function (_id, _title, _desc) {
                        var _contents = Array.from(this.state.contents);
                        var i = 0;
                        while (i < _contents.length) {
                        if (_contents[i].id === _id) {
                            _contents[i] = { id: _id, title: _title, desc: _desc };
                            break;
                        }
                        i = i + 1;
                        }
                        this.setState({ contents: _contents, mode: "read" });
                    }.bind(this)}
                    ></UpdateContent>
                );
                }
        *delete
            <Control
            onChangeMode={function (_mode) {
                if (_mode === "delete") {
                if (window.confirm("really?")) {
                    var _contents = Array.from(this.state.contents);
                    var i = 0;
                    while (i < _contents.length) {
                    if (_contents[i].id === this.state.selected_content_id) {
                        _contents.splice(i, 1);
                        break;
                    }
                    i = i + 1;
                    }
                    this.setState({ mode: "welcome", contents: _contents });
                    alert("deleted!");
                }
                } else {
                this.setState({ mode: _mode });
                }
            }.bind(this)}
            ></Control>  
    13.
        *state change
                state = {
                number: this.props.initNumber,
            };
            +) <p>Number: {this.state.number}</p>
            <input
            type="button"
            value="random"
            onClick={function () {
                this.setState({ number: Math.random() });
            }.bind(this)}
            />
        *hook
            var numberState = useState(props.initNumber);
            var numberState = useState(props.initNumber);
            var number = numberState[0];
            var setNumber = numberState[1];
            console.log('numberState', numberState);
            +)  <p>Number: {number}</p>
                <input type="button" value="random" onClick={
                    function () {
                    setNumber(Math.random());
                    }
                }></input>
        *NowTime
            var dateState = useState((new Date()).toString());  
            var _date = dateState[0];
            var setDate = dateState[1];
            +) <p>Date: {_date}</p>
            +) <input type="button" value="date" onClick={
                    function () {
                        setDate((new Date()).toString());
                    }
                }></input>
            +) date: (new Date()).toString()
            +) <p>Date: {this.state.date}</p>
            +) <input type="button" value="date" onClick={
                function () {
                        this.setState({date: (new Date()).toString()});
                    }.bind(this)
                }></input>
        *repacktoring =>
            handleRandom = () => {
                this.setState({number: Math.random()});
            }

            handleDate = () => {
                this.setState({date: (new Date()).toString()});
            }       
            +) <input type="button" value="random" onClick={this.handleRandom}></input>
            <input type="button" value="date" onClick={this.handleDate}></input> 

            function FuncComp({initNumber}) {
                const [number, setNumber] = useState(initNumber);
                const [_date, setDate] = useState((new Date()).toString());
            +)  <input type="button" value="random" onClick={() => setNumber(Math.random())}></input>
                <input type="button" value="date" onClick={() => setDate((new Date()).toString())}></input>
        *hide
            const [funcShow, setFuncShow] = useState(true);
            const [classShow, setClassShow] = useState(true);
            +) <input type="button" value="remove func" onClick={() => setFuncShow(false)}></input>
            <input type="button" value="remove class" onClick={() => setClassShow(false)}></input>      
            {funcShow ? <FuncComp initNumber={2}></FuncComp> : null}
            {classShow ? <ClassComp initNumber={2}></ClassComp> : null}
            </div>
            +)  <input type="button" value="toggle func" onClick={() => setFuncShow(!funcShow)}></input>
                <input type="button" value="toggle class" onClick={() => setClassShow(!classShow)}></input>
